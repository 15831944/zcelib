
#ifndef SOARING_LIB_SVRD_APP_MAIN_H_
#define SOARING_LIB_SVRD_APP_MAIN_H_

//本来用宏实现了，但是写完了，稍微想改几行，就发现剧烈痛苦。还是用模版把。

namespace TSS_LIB
{

template <class application_class, class  config_class>
int tss_svrd_main(int argc, char *argv[])
{
    //不处理异常，因为处理了不好调试,特别是在Win32下调试。

    application_class::instance();
    config_class::instance();

    const size_t ERROR_INFO_LEN = 512;
    char err_str_info[ERROR_INFO_LEN];

    //开始日志是无法输出，
    //ZLOG_INFO("[framework] App init_instance start");

    //初始化
    int ret = application_class::instance()->init_instance(argc, argv, config_class::instance());

    if (ret != SOAR_RET::SOAR_RET_SUCC)
    {
        SOAR_RET::ZLoadString(ret, err_str_info);
        ZLOG_ERROR("[framework] App name [%s] class [%s] init_instance fail:%d|%s",
                   application_class::instance()->get_app_runname(),
                   typeid(*application_class::instance()).name(),
                   ret,
                   err_str_info);
        return ret;
    }

    ZLOG_INFO("[framework] App name [%s] class [%s] init_instance sucess.",
              application_class::instance()->get_app_runname(),
              typeid(*application_class::instance()).name());

    ZLOG_INFO("[framework] App name [%s] class [%s] run_instance start.",
              application_class::instance()->get_app_runname(),
              typeid(*application_class::instance()).name());
    //运行
    ret = application_class::instance()->run_instance();

    //标示运行失败
    if (ret != SOAR_RET::SOAR_RET_SUCC)
    {
        SOAR_RET::ZLoadString(ret, err_str_info);
        ZLOG_ERROR("[framework] App name [%s] class [%s] run_instance fail:%d|%s .",
                   application_class::instance()->get_app_runname(),
                   typeid(*application_class::instance()).name(),
                   ret,
                   err_str_info);
        //这儿是退出,还是进行exit_instance,这是一个问题，哈哈
        //return ret;
    }
    else
    {
        ZLOG_ERROR("[framework] App name [%s] class [%s] run_instance sucess.",
                   application_class::instance()->get_app_runname(),
                   typeid(*application_class::instance()).name());
    }

    ZLOG_INFO("[framework] App name [%s] class [%s] exit_instance start.",
              application_class::instance()->get_app_runname(),
              typeid(*application_class::instance()).name());
    //退出处理
    application_class::instance()->exit_instance();

    ZLOG_INFO("[framework] App name [%s] class [%s] exit_instance start.",
              application_class::instance()->get_app_runname(),
              typeid(*application_class::instance()).name());

    //清理APP 和配置的instance
    config_class::clean_instance();
    application_class::clean_instance();

    //关闭日志
    ZCE_Trace_LogMsg::clean_instance();

    return SOAR_RET::SOAR_RET_SUCC;

}

};

#endif //#ifndef SOARING_LIB_SVRD_APP_NONCTRL_H_

