#--------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------
#我们可以使用的MakreFile的变量，
#这些变量你可以参考ACE的在wrapper_macros.GNU，platform_macros.GNU有定义
#
#  变量              描述
#  --------          -----------
#  AR                ar 命令的名字
#  CC                C编译器的命令的名字
#  CXX               C++编译器的命令的名字
#  RM                删除工具的命令
#  MKDIR             建立目录，递归创建的目录，直接支持递归
#  DLD               dynamic linker 动态库link命令的名字，
#  LD                linker 命令的名字

#  VERSIONTYPE       版本类型，debug，release，或者 neutral ，debug=1,VERSIONTYPE=debug,release=1 VERSIONTYPE=release debug=0 and release=0 VERSIONTYPE=neutral
#  CFLAGS            C语言编译选项
#  CCFLAGS           C++语言编译选项
#  DEFFLAGS          预处理的DEFINE部分
#  CPPFLAGS          用于语言编译的预处理标志，比如DEFINDE等. CPPFLAGS += $(DEFFLAGS) 
#  SOFLAGS           生成.so库时候的参数
#  ARFLAGS           ar 的参数
#  DCFLAGS           Debugging 程序的C语言编译选项,一般在有 debuginfo=1 变量时有效
#  DCCFLAGS          Debugging 程序的C++语言编译选项,一般在有 debuginfo=1变量时有效
#  OCFLAGS           Optimizing 程序的C语言编译选项
#  OCCFLAGS          Optimizing 程序的C++语言编译选项
#  PCFLAGS           profiling 程序的C语言编译选项 profiling是什么不要问我。
#  PCCFLAGS          profiling 程序的C++语言编译选项
#  LDFLAGS           ld linker flags
 
#  COMPILE.c         编译C文件的命令行,  一般为:$(CC) $(CFLAGS) $(CPPFLAGS) -c
#  COMPILE.cc        编译C++文件的命令行,一般为:$(CXX) $(CCFLAGS) $(CPPFLAGS) $(PTDIRS) -c
#  COMPILEESO.cc     $(CXX) $(CCFLAGS) $(CPPFLAGS) $(PTDIRS),（少个-c）没太搞明白，不知道为什么和SO有关，好像是为了修正错误增加的。不理也罢,
#  LINK.c            链接C文件的命令行
#  LINK.cc           链接C++文件的命令行,一般为:$(PURELINK) $(PRELINK) $(LD) $(CCFLAGS) $(CPPFLAGS) $(PTDIRS)
#  SOLINK.cc         生成.so库时候的命令行

#  INCLDIRS          外部的头文件定义的部分
#  LIBARYS           定义的外部库部分,包括库路径，库名称，ACE原来用的LIBS这个变量

#  MAKEFLAGS         Flags that are passed into the compilation from the commandline
#  PIC               PIC就是position independent code 
#  PWD               得到当前目录的命令

#  PRELINK           LINK之前执行的命令，有些工具需要在LINK前干点坏事，比如purify等
#  PURELINK          purify 执行的命令，purify是什么不要问我。

#--------------------------------------------------------------------------------------------------------------------

#ACE的Makefile支持，make "debug="等同于debug=0，我不打算这样干，无聊宠坏你

#编译的版本类型,暂时默认编译中性 neutral 版本
debug ?= 0
release ?= 0

#默认都打开debuginfo,optimize，GCC这点和WINDOWS完全不一样
debuginfo ?=1
optimize ?= 1

#Build with thread support.
threads ?= 1
#编译增加-pipe选项
pipes ?= 1

#对于编译环境是否，增加-static
static_link ?= 0
symlinks ?= 0

#交叉编译 ==32，指定编译32位的程序，==64，编译64位程序
buildbits ?= 0

#如果你非要当流氓不用告警，你自己加入一个 rogue=1,这样就可以在有告警的情况下编译通过
rogue ?= 0 

#为了gprof 的profile 性能测试
profile ?= 0

#一些测试工具的支持，目前都不考虑了，vargrind目前是最好的测试工具
insure ?= 0
purify ?= 0
quantify ?= 0

#ccache
ccache ?= 0

#--------------------------------------------------------------------------------------------------------------------




# 这个赋值?=是表示没有定义就赋值
AR        ?= ar

CC        ?= gcc
CXX       ?= g++
DLD       := $(CXX)
LD        := $(CXX)
RM        ?= rm -f
MKDIR     ?= mkdir -p
RMDIR     ?= rm -rf

#如果定义使用insure查询代码的bug。
ifeq ($(insure),1)
CC  = insure
CXX = insure
endif

#如果需要使用ccache加快编译速度
ifeq ($(ccache),1)
CC  := ccache $(CC)
CXX := ccache $(CXX)
endif

#告警标志
WARNFLAGS += -W -Wall -Wpointer-arith -Winline -Wunreachable-code -Wshadow -Wcast-align

#这个告警有胆量的可以考虑一下，我第一次挑战以失败告终
ifeq ($(effcpp),1)
WARNFLAGS += -Weffc++
endif


#-Werror 是告警为错误,我消灭了一半服务器的告警,所以我有权要求你也这样做,
ifeq ($(rogue),1)
WARNFLAGS +=
else
WARNFLAGS += -Werror 
endif 

#编译选项
CFLAGS += $(WARNFLAGS) -MMD 
CCFLAGS += $(WARNFLAGS) -std=c++11 -MMD

#注意这个地方,-MMD是这样一个选项的，在生产.o的同时，生成.d文件,而且.d文件不包含系统头文件.

ifeq ($(buildbits),32)
CFLAGS += -m32
CCFLAGS += -m32
LDFLAGS  += -m32
endif
ifeq ($(buildbits),64)
CFLAGS += -m64
CCFLAGS += -m32
LDFLAGS  += -m64
endif

#ARFLAGS好像外部有定义，诡异
ARFLAGS   = rsuv


#-pipe用于加快编译速度，如果pipes被设置1打开-pipe,
#我自己的测试-pipe加快不了多少速度
ifeq ($(pipes), 1)
CFLAGS += -pipe
CCFLAGS += -pipe
endif # pipes


#优化选项
OCFLAGS ?= -O2
OCCFLAGS ?= -O2

#如果有优化
ifeq ($(optimize),1)
CFLAGS  += $(OCFLAGS)
CCFLAGS += $(OCCFLAGS)
endif # optimize


#-ggdb这个调试开关打开后调试信息应该好于-g,但是不能使用其他调试器调试了
DCFLAGS  += -ggdb
DCCFLAGS += -ggdb

#如果需要调试信息，linux的版本一般还是带上了调试信息，无论版本
ifeq ($(debuginfo),1)
  CFLAGS  += $(DCFLAGS)
  CCFLAGS += $(DCCFLAGS)
endif # debuginfo

#下面两个选项主要是为了动态库导出准备的。

#CCFLAGS += -fvisibility=hidden -fvisibility-inlines-hidden

PCFLAGS  +=-pg
PCCFLAGS +=-pg

#为GPORF编译准备的编译选项
ifeq ($(profile),1)
  CFLAGS  += $(PCFLAGS)
  CCFLAGS += $(PCCFLAGS)
endif # profile

INCLDIRS ?=
DEFFLAGS ?=


#=====================================================================================================================
#不支持同时定义这两个东东，
ifeq ($(debug),1)
ifeq ($(release),1)
  $(error flag debug=1 and release=1 is error.please check your make file or command.)
endif
endif

OS_BITS := $(shell getconf LONG_BIT)

ifeq ($(OS_BITS),32)
VERSIONTYPE := x86_neutral
ifeq ($(debug),1)
  VERSIONTYPE := x86_debug
endif
ifeq ($(release),1)
  VERSIONTYPE := x86_release
endif
endif

ifeq ($(OS_BITS),64)
VERSIONTYPE := x64_neutral
ifeq ($(debug),1)
  VERSIONTYPE := x64_debug
endif
ifeq ($(release),1)
  VERSIONTYPE := x64_release
endif
endif

ifeq ($(debug),1)
  DEFFLAGS  += -DDEBUG
endif

ifeq ($(release),1)
DEFFLAGS  += -DNDEBUG
endif
#=====================================================================================================================

#线程增加，理论上多线程，也可以使用-pthread，-pthread等同与-D_REENTRANT 连接时等同于-lpthread
ifeq ($(threads),1)
  DEFFLAGS  += -D_REENTRANT 
endif # threads

# Rely on _GNU_SOURCE to set these defaults defined in /usr/include/features.h
# instead of setting them directly here (older versions of gcc don't set it
# for you): _SVID_SOURCE _BSD_SOURCE _POSIX_SOURCE _POSIX_C_SOURCE=199506L, ...
DEFFLAGS += -D_GNU_SOURCE

#-shared包括了-fpic选项，该选项用于生成位置无关代码
SOFLAGS += $(DEFFLAGS) -shared  

ifeq ($(optimize),1)
  SOFLAGS += -Wl, $(OCCFLAGS)
endif

LIBARYS += -ldl

ifeq ($(threads),1)
  LIBARYS += -lpthread -lrt
endif

CPPFLAGS += $(DEFFLAGS) $(INCLDIRS)

#-Winvalid-pch是检查pch文件是否有效的。但因为我们使用了多个gch的方案，暂时不用这个参数了。
#主要可以帮助你定位bug
COMPILE.c       = $(CC)  $(CFLAGS)  $(CPPFLAGS) -c
COMPILE.cc      = $(CXX) $(CCFLAGS) $(CPPFLAGS) -c

PRECOMPILE.c    = $(CC)  $(CFLAGS)  $(CPPFLAGS) -x c++-header -c
PRECOMPILE.cc   = $(CXX) $(CCFLAGS) $(CPPFLAGS) -x c++-header -c 

PRELINK  ?=
PURELINK ?=
LDFLAGS  ?= -rdynamic

# -static 强制编译器默认选择静态库，默认编译器会选择动态库，但我们的发布不在乎东西的大小，
#而动态库的管理比较麻烦，我们一般都使用静态库发布。
ifeq ($(static_link),1)
  LDFLAGS += -static
endif


LINK.c  = $(PURELINK) $(PRELINK) $(LD) $(CFLAGS)  $(LDFLAGS) 
LINK.cc = $(PURELINK) $(PRELINK) $(LD) $(CCFLAGS) $(LDFLAGS) 
SOLINK.cc = $(PRELINK) $(DLD) $(SOFLAGS)


